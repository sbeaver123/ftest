/**
 * (c) Simon Beaver 2018
 */
package org.imrryr.floowtest;

import java.util.ArrayList;

import org.bson.Document;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.MapReduceAction;

/**
 * Class to perform map-reduce query that counts the words
 * in the documents generated by loading the file.
 *
 * @author Simon Beaver
 */
public class WordCounter {

	public void doCount(MongoDatabase db, String filehash) {
		
		MongoCollection<Document> collection = db.getCollection(filehash);
		
		String results = filehash + "results";
		
		collection.mapReduce(getMapCmd(), getReduceCmd())
				.action(MapReduceAction.REDUCE)
				.collectionName(results)
				.into(new ArrayList<>());
	}

	private String getMapCmd() {
		String cmd = "function map() {" + 
				"var cnt = this.txt;" + 
				"var words = cnt.match(/\\w+/g);" + 
				"if (words == null) {" + 
				"return;" + 
				"}" + 
				"for (var i = 0; i < words.length; i++) {" + 
				"    emit({ word:words[i] }, { count:1 });" + 
				"}" + 
				"}";
		return cmd;
	}

	private String getReduceCmd() {
		String cmd = "function reduce(key, counts) {" + 
				"var cnt = 0;" + 
				"for (var i = 0; i < counts.length; i++) {" + 
				"    cnt = cnt + counts[i].count;" + 
				"}" + 
				"return { count:cnt };" +
				"}";
		return cmd;
	}
}
